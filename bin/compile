#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -o errexit

main() {
  set -o pipefail
  mkdir -p "$1" "$2" "$3"

  __debug 'defining variable defaults'

  BUILD_DIR=$(cd "$1/" && pwd)
  CACHE_DIR=$(cd "$2/" && pwd)
  ENV_DIR=$(cd "$3/" && pwd)
  PATH="$BUILD_DIR/build/linux/amd64:$PATH:$BUILD_DIR/bin:$CACHE_DIR/bin"

  GO15VENDOREXPERIMENT=
  GO_BINARY_PATH_DIR=
  GO_BINARY_URL=
  GO_IMPORT_PATH='github.com/replace-me/example'
  GO_VERSION='1.5.1'

  IMPORTABLE_VARS=(
    GO15VENDOREXPERIMENT
    GO_BINARY_PATH_DIR
    GO_BINARY_URL
    GO_IMPORT_PATH
    GO_VERSION
  )

  __debug "importing variables from $ENV_DIR"

  for var in "${IMPORTABLE_VARS[@]}" ; do
    if test -f "$ENV_DIR/$var" ; then
      eval "$var=\"$(cat $ENV_DIR/$var)\""
    fi
  done

  export \
    GO15VENDOREXPERIMENT \
    GO_BINARY_PATH_DIR \
    GO_IMPORT_PATH \
    GO_VERSION

  __debug 'ensuring GO_BINARY_BUCKET is defined'

  if ! test -n "$GO_BINARY_BUCKET" ; then
    GITHUB_SLUG=${GO_IMPORT_PATH/github.com\//}
    GO_BINARY_BUCKET="${GITHUB_SLUG//\//-}-artifacts"
  fi

  __debug 'ensuring GO_BINARY_URL is defined'

  if ! test -n "$GO_BINARY_URL" ; then
    S3_PATH="$GO_BINARY_BUCKET${GO_IMPORT_PATH/github.com/}/$SOURCE_VERSION/build.tar.gz"
    GO_BINARY_URL="${S3_HOST:-https://s3.amazonaws.com}/$S3_PATH"
  fi

  export GO_BINARY_URL

  mkdir -p "$BUILD_DIR/bin" "$CACHE_DIR/bin" "$CACHE_DIR/.profile.d"

  cd "$BUILD_DIR"

  __debug 'reading make targets'

  MAKE_TARGETS="$(make -pn 2>&1 || true)"

  __debug 'finished reading make targets'

  if [[ $MAKE_TARGETS =~ heroku-bin: ]] ; then
    __make_heroku_bin
  elif [[ $MAKE_TARGETS =~ heroku: ]] ; then
    __make_heroku
  else
    __download_binary
  fi

  if ! test -f $CACHE_DIR/.profile.d/homebin.sh ; then
    echo 'PATH=$PATH:$HOME/gopath/bin:$HOME/build/linux/amd64:$HOME/bin' | \
      tee $CACHE_DIR/.profile.d/homebin.sh 2>&1 | __indent
  fi

  if test -n "$GO_BINARY_PATH_DIR" ; then
    echo "PATH=$GO_BINARY_PATH_DIR:\$PATH" | \
      tee $CACHE_DIR/.profile.d/go-binary-path.sh | __indent
  else
    rm -vf $CACHE_DIR/.profile.d/go-binary-path.sh 2>&1 | __indent
  fi

  __ann 'Syncing cache dir to build dir... '
  rsync \
    --exclude '.gimme.tar.bz2' \
    -avz \
    $CACHE_DIR/ $BUILD_DIR/ 2>&1 | __indent
}

__ann() {
  echo "-----> $*"
}

__say() {
  echo "       $*"
}

__debug() {
  if [[ -n "$DEBUG" ]] ; then
    echo "DEBUG> $*"
  fi
}

__indent() {
  c="${1:+"2,999"} s/^/       /"
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

__make_heroku() {
  if ! test -f $CACHE_DIR/bin/gimme ; then
    __ann 'Downloading gimme'
    curl -sSL -o $CACHE_DIR/bin/gimme \
      https://raw.githubusercontent.com/travis-ci/gimme/master/gimme
    chmod +x $CACHE_DIR/bin/gimme
  fi

  if test -f $CACHE_DIR/.gimme.tar.bz2 ; then
    __ann "Expanding $CACHE_DIR/.gimme.tar.bz2"
    tar -xjf $CACHE_DIR/.gimme.tar.bz2 -C $CACHE_DIR 2>&1 | __indent
  fi

  __ann "Installing go $GO_VERSION"
  eval "$(HOME=$CACHE_DIR $CACHE_DIR/bin/gimme $GO_VERSION)" 2>&1 | __indent

  GOPATH_DEST=$CACHE_DIR/gopath/src/$GO_IMPORT_PATH

  mkdir -p $(dirname $GOPATH_DEST)
  rm -Rvf $GOPATH_DEST 2>&1 | __indent

  __ann "Copying $BUILD_DIR to $GOPATH_DEST"
  cp -vR $BUILD_DIR $GOPATH_DEST 2>&1 | __indent

  __ann 'Setting up GOROOT, GOPATH, and PATH'

  export GOROOT=$CACHE_DIR/.gimme/versions/go$GO_VERSION.linux.amd64
  __say "export GOROOT=\"$GOROOT\""

  export GOPATH=$CACHE_DIR/gopath
  __say "export GOPATH=\"$GOPATH\""

  export PATH=$GOROOT/bin:$CACHE_DIR/gopath/bin:$PATH
  __say "export PATH=\"$PATH\""

  __ann 'Running make heroku'
  make heroku 2>&1 | __indent

  if test -d $CACHE_DIR/.gimme ; then
    pushd $CACHE_DIR &>/dev/null
    __ann "Compressing $CACHE_DIR/.gimme"
    tar -cjf .gimme.tar.bz2 .gimme 2>&1 | __indent
    rm -rf .gimme 2>&1 | __indent
    popd &>/dev/null
  fi
}

__make_heroku_bin() {
  __ann 'Running make heroku-bin'
  make heroku-bin 2>&1 | __indent
}

__download_binary() {
  __debug 'creating tarball download dest'
  DEST_TARBALL=$(mktemp /tmp/binary.tar.gz.XXXXX)

  __ann "Downloading $GO_BINARY_URL"
  curl -sSLf -o "$DEST_TARBALL" "$GO_BINARY_URL" 2>&1 | __indent

  __ann "Expanding $(basename $GO_BINARY_URL)"
  tar -xzvf "$DEST_TARBALL" 2>&1 | __indent
}

main "$@"
